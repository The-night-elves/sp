package main

import (
	"flag"
	"fmt"
	"os"
	"sp/pkg/parse"
	"sp/utils"
	"strings"
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of sql_update_by_struct:\n")
	fmt.Fprintf(os.Stderr, "\tstringer [flags] -type 'struct_name1,struct_name2, ...'\n")
	//fmt.Fprintf(os.Stderr, "\tstringer [flags] -output  \n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	typeNames := flag.String("type", "", "comma-separated list of type names; must be set")
	//output := flag.String("output", "", "output file name; default srcdir/<type>_gen.go")
	flag.Usage = Usage
	flag.Parse()

	if *typeNames == "" {
		flag.Usage()
		os.Exit(2)
	}
	names := strings.Split(*typeNames, ",")
	filterName := make(map[string]struct{}, len(names))
	for i := 0; i < len(names); i++ {
		name := strings.TrimSpace(names[i])
		filterName[name] = struct{}{}
	}

	fmt.Println("typeNames:", *typeNames)

	sp := parse.Builder{}
	err := sp.ParseFileByName("/home/night/lang/go/sp/testdata/types.go")
	if err != nil {
		panic(err)
	}
	g := utils.Gen{}

	g.Println("// Code generated by sql_update_by_struct DO NOT EDIT.\n")
	g.Printf("package %s\n\n", sp.Name)
	for _, obj := range sp.Structs {
		_, ok := filterName[obj.Name]
		if !ok {
			continue
		}
		var ident = strings.ToLower(string(obj.Name[0]))
		g.Println()
		g.Printf("func (%s *%s) Update() ([]string, []any) {\n", ident, obj.Name)
		g.Printf("\tcols := make([]string, 0, %d)\n", len(obj.Fields))
		g.Printf("\tvals := make([]any, 0, %d)\n", len(obj.Fields))
		g.Printf("\tvar index = 1\n")
		var index = 1
		for _, field := range obj.Fields {
			name := field.Name
			if name == "" {
				name = field.Kind
			}

			g.Printf("\tif %s.%s != nil {\n", ident, name)
			g.Printf("\t\tvals = append(vals, *%s.%s)\n", ident, name)

			key, ok := field.Tags["db"]
			if !ok {
				key = strings.ToLower(name)
			}
			g.Printf("\t\tcols = append(cols, \"%s=$%d\")\n", key, index)
			g.Printf("\t\tindex++\n")
			index++

			g.Println("\t}")
		}
		g.Printf("\treturn cols, vals\n")
		g.Println("}")
	}
	file, err := os.Create("/home/night/lang/go/sp/testdata/types.gen.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()
	fmt.Println(g.OutString())
	file.WriteString(g.OutString())
}
